IMPORT "ltb/ltb.ldpl"
IMPORT "token.ldpl"

PROCEDURE:

tg bot init with token token

# Get the current games of a chat in a list
sub getGamesList
parameters:
    gamesList is text list
    chatId is number
local data:
    gamesFile is text
    games is text
procedure:
    clear gamesList
    in gamesFile join "games/" chatId
    load file gamesFile in games
    if errorcode is equal to 0 then
        split games by crlf in gamesList
        delete last element of gamesList # File ends in newline, ignore last ""
    end if
end sub

# Adds a game to the chat's games list by play URL, increments new games counter
sub addGame
parameters:
    gameURL is text
    chatId is number
    newGames is number
local data:
    id is text
    i is number
    j is number
    gamesList is text list
    game is text
    gamesFile is text
procedure:
    store length of "https://www.doodlest.com/play/" in i
    store length of gameURL in j
    in j solve j - i
    substring gameURL from i length j in id
    store id in i
    if i is equal to 0 then
        return # id is not a number (or it's 0, lets hope it's not a valid id)
    end if

    call getGamesList with gamesList chatId
    for each game in gamesList do
        if game is equal to id then
            return # repeated game
        end if
    repeat

    incr newGames
    in id join id crlf
    in gamesFile join "games/" chatId
    append id to file gamesFile
end sub

# /games command
sub displayGames
parameters:
    chatId is number
local data:
    i is number
    games is text
    gamesList is text list
    game is text
    endedGames is text list
    currentGames is text list
    totalPlayers is number
    playedPlayers is number
    remainingPlayers is number
    totalPlayersL is number list
    playedPlayersL is number list
    # title is text
    response is text
    length is number
    gamesFile is text
procedure:
    call getGamesList with gamesList chatId
    store length of gamesList in length
    if length is equal to 0 then
        in response join "üò± No games in progress, create one now:" crlf "https://www.doodlest.com/create/"
        store 1 in errorcode
        while errorcode is equal to 1 do
            tg bot send message response to chatId
        repeat
        return
    end if

    # Classify games
    for each game in gamesList do
        call gameStatus with game totalPlayers playedPlayers remainingPlayers
        if remainingPlayers is equal to 0 then
            push game to endedGames
        else if remainingPlayers is greater than 0 then
            push game to currentGames
            push totalPlayers to totalPlayersL
            push playedPlayers to playedPlayersL
        end if
    repeat

    # Display completed games
    store length of endedGames in length
    if length is greater than 0 then
        store "üñºÔ∏è New #CompletedGames:" in response
        for each game in endedGames do
            in response join response crlf "https://www.doodlest.com/gallery/" game
        repeat
    end if

    # Display games in progress
    store length of currentGames in length
    if length is greater than 0 then
        if response is not equal to "" then
            in response join response crlf crlf # New line after ended games
        end if
        in response join response "‚úèÔ∏è Games in progress:"
        for i from 0 to length step 1 do
            in response join response crlf "[" playedPlayersL:i "/" totalPlayersL:i "] " "https://www.doodlest.com/play/" currentGames:i
            in games join games currentGames:i crlf
        repeat
    end if

    store 1 in errorcode
    while errorcode is equal to 1 do
        tg bot send message response to chatId
    repeat

    # Update games file
    in gamesFile join "games/" chatId
    write games to file gamesFile
end sub

# Returns the game's number of players (total, played, remaining), or -1 total if invalid game
sub gameStatus
parameters:
    id is text
    total is number
    played is number
    remaining is number
local data:
    length is number
    splitted is text list
procedure:
    join "https://www.doodlest.com/include/gamesleft.php?id=" and id in ltb.curl.in.url
    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    store 1 in errorcode
    while errorcode is equal to 1 do
        call external ltb.curl.request
    repeat
    split ltb.curl.out.response by " " in splitted
    store length of splitted in length
    if length is equal to 3 then
        store splitted:0 in total
        store splitted:1 in played
        store splitted:2 in remaining
    else
        store -1 in total
    end if
end sub

# Returns the gallery's title of the given id (or "" if unfinished)
sub galleryTitle
parameters:
    id is text
    title is text
local data:
    i is number
    j is number
procedure:
    join "https://www.doodlest.com/gallery/" and id in ltb.curl.in.url
    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    call external ltb.curl.request
    if ltb.curl.out.response is equal to "" then
        store "" in title
        return
    end if
    get index of "<title>" from ltb.curl.out.response in i
    in i solve i + 7
    get index of "</title>" from ltb.curl.out.response in j
    in j solve j - i
    substring ltb.curl.out.response from i length j in title
end sub

# This sub-procedure is called each time a new text message arrives.
# Captions in animation, audio, document, photo, video or voice are captured too.
sub ltb.onMessage
parameters:
    messageId is number     # id of the sent message
    chatId is number        # id of the chat where is was sent
    userData is text map    # user data from sender
    messageText is text     # content of the message
local data:
    i is number
    lines is text list
    words is text list
    line is text
    word is text
    newGames is number
    response is text
procedure:
    get index of "/games" from messageText in i
    if i is equal to 0 then
        call displayGames with chatId
        return
    end if

    split messageText by "\\n" in lines
    for each line in lines do
        split line by " " in words
        for each word in words do
            get index of "https://www.doodlest.com/play/" from word in i
            if i is equal to 0 then
                call addGame with word chatId newGames
            end if
        repeat
    repeat
    if newGames is greater than 0 then
        if newGames is equal to 1 then
            in response join "üí• New Doodlest game added!" crlf
        else
            in response join "üí• " newGames " new Doodlest games added!" crlf
        end if
        store 1 in errorcode
        while errorcode is equal to 1 do
            tg bot send message response to chatId
        repeat
    end if
end sub




# This sub-procedure is called each time a user joins a chat.
sub ltb.onJoin
parameters:
    messageId is number     # id of the sent message announcing the user join
    chatId is number        # id of the chat the user joined
    userData is text map    # user data from the user who joined the chat
procedure:
    # I don't use this sub-procedure :)
end sub

# This sub-procedure is called each time a user leaves a chat.
sub ltb.onDeparture
parameters:
    messageId is number     # id of the sent message announcing the user departure
    chatId is number        # id of the chat the user left
    userData is text map    # user data from the user who left the chat
procedure:
    # I don't use this sub-procedure :)
end sub

# This sub-procedure is called each time a user press a button with callback data.
sub ltb.onCallbackQuery
parameters:
    chatId is number        # id of the chat from the message of the button that was pressed
    userData is text map    # user data from the user who pressed the button
    callbackData is text    # callback data from the pressed button
    answerText is text      # store a text here to display a notification to the user
    answerAlert is number   # store 1 here to show answerText as an alert instead of a notification at the top of the chat screen
procedure:
    # I don't use this sub-procedure :)
end sub